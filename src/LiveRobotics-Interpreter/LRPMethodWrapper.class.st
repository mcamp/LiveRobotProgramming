"
I'm in charge of save the instance and the selector generated by LRPCodeGenerator and evaluate it whenever it needs. 
"
Class {
	#name : #LRPMethodWrapper,
	#superclass : #Object,
	#instVars : [
		'inst',
		'selector'
	],
	#category : #'LiveRobotics-Interpreter'
}

{ #category : #'instance creation' }
LRPMethodWrapper class >> instance: anObject selector: aSelector [
	^self new 
		inst: anObject;
		selector: aSelector;
		yourself.
]

{ #category : #watchpoints }
LRPMethodWrapper >> generatedNodeFor: anInteger [
	| initInterval|
	
	"add 3: 1 for return after selector, 1 for ^ character, 1 for space after ^ character"
	initInterval := anInteger + self selector size + 3.
	^((self inst class)>>(self selector)) ast bestNodeFor: 
		(initInterval to: initInterval - 1).
	
]

{ #category : #evaluating }
LRPMethodWrapper >> ifError: anErrorBlock [

	^[ self value ] on: Error do: anErrorBlock
]

{ #category : #accessing }
LRPMethodWrapper >> inst [
	^ inst
]

{ #category : #accessing }
LRPMethodWrapper >> inst: anObject [
	inst := anObject
]

{ #category : #accessing }
LRPMethodWrapper >> selector [
	^ selector
]

{ #category : #accessing }
LRPMethodWrapper >> selector: anObject [
	selector := anObject
]

{ #category : #evaluating }
LRPMethodWrapper >> value [
	^inst perform: selector
]
